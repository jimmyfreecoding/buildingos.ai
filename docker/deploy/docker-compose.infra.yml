version: '3.8'

# 仅包含基础设施容器的配置文件
services:
  # 基础设施服务 - PostgreSQL
  postgres:
    image: ${DOCKER_REGISTRY}/postgres:15-alpine
    container_name: buildingos-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - buildingos-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "app.type=infrastructure"
      - "app.service=database"

  # 基础设施服务 - Redis
  redis:
    image: ${DOCKER_REGISTRY}/redis:7-alpine
    container_name: buildingos-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - buildingos-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "app.type=infrastructure"
      - "app.service=cache"

  # 基础设施服务 - TDengine
  tdengine:
    image: ${DOCKER_REGISTRY}/tdengine:3.3.0.0
    container_name: buildingos-tdengine
    restart: unless-stopped
    environment:
      - TAOS_FQDN=tdengine
    volumes:
      - tdengine_data:/var/lib/taos
      - tdengine_log:/var/log/taos
    networks:
      - buildingos-network
    ports:
      - "6030:6030"
      - "6041:6041"
    labels:
      - "app.type=infrastructure"
      - "app.service=timeseries"

  # 基础设施服务 - EMQX
  emqx:
    image: ${DOCKER_REGISTRY}/emqx:5.4.1
    container_name: buildingos-emqx
    restart: unless-stopped
    environment:
      - EMQX_NAME=emqx
      - EMQX_HOST=emqx
    volumes:
      - emqx_data:/opt/emqx/data
      - emqx_log:/opt/emqx/log
    networks:
      - buildingos-network
    ports:
      - "1883:1883"
      - "8083:8083"
      - "8084:8084"
      - "8883:8883"
      - "18083:18083"
    labels:
      - "app.type=infrastructure"
      - "app.service=mqtt"

  # 基础设施服务 - ZLMediaKit
  zlmediakit:
    image: ${DOCKER_REGISTRY}/zlmediakit:master
    container_name: buildingos-zlmediakit
    restart: unless-stopped
    volumes:
      - zlmediakit_data:/opt/media
    networks:
      - buildingos-network
    ports:
      - "1935:1935"
      - "8080:80"
      - "8443:443"
      - "8554:554"
      - "10000:10000"
      - "10000:10000/udp"
    labels:
      - "app.type=infrastructure"
      - "app.service=media"

  # 基础设施服务 - Grafana
  grafana:
    image: ${DOCKER_REGISTRY}/grafana:10.2.3
    container_name: buildingos-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - buildingos-network
    ports:
      - "3001:3000"
    depends_on:
      - postgres
      - tdengine
    labels:
      - "app.type=infrastructure"
      - "app.service=monitoring"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  tdengine_data:
    driver: local
  tdengine_log:
    driver: local
  emqx_data:
    driver: local
  emqx_log:
    driver: local
  zlmediakit_data:
    driver: local
  grafana_data:
    driver: local

networks:
  buildingos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16