# 后端应用部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: buildingos-backend
  namespace: buildingos
  labels:
    app: buildingos-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: buildingos-backend
  template:
    metadata:
      labels:
        app: buildingos-backend
    spec:
      containers:
      - name: backend
        image: swr.cn-east-3.myhuaweicloud.com/geeqee/buildingos-backend:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: buildingos-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: buildingos-config
              key: PORT
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: buildingos-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: buildingos-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: buildingos-config
              key: POSTGRES_DB
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: buildingos-secrets
              key: REDIS_PASSWORD
        - name: TDENGINE_URL
          value: "tdengine:6030"
        - name: TDENGINE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: buildingos-secrets
              key: TDENGINE_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: buildingos-secrets
              key: JWT_SECRET
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: buildingos-config
              key: LOG_LEVEL
        - name: MAX_FILE_SIZE
          valueFrom:
            configMapKeyRef:
              name: buildingos-config
              key: MAX_FILE_SIZE
        volumeMounts:
        - name: backend-data
          mountPath: /app/uploads
          subPath: uploads
        - name: backend-data
          mountPath: /app/logs
          subPath: logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: backend-data-pvc
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U buildingos; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: buildingos-secrets
              key: POSTGRES_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: buildingos-backend
  namespace: buildingos
  labels:
    app: buildingos-backend
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
  selector:
    app: buildingos-backend
---
# 前端应用部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: buildingos-web
  namespace: buildingos
  labels:
    app: buildingos-web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: buildingos-web
  template:
    metadata:
      labels:
        app: buildingos-web
    spec:
      containers:
      - name: web
        image: swr.cn-east-3.myhuaweicloud.com/geeqee/buildingos-web:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: buildingos-web
  namespace: buildingos
  labels:
    app: buildingos-web
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: buildingos-web
---
# Grafana 部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: buildingos
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "tdengine-datasource"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: buildingos
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana