name: BuildingOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: registry.cn-hangzhou.aliyuncs.com/buildingos
  DOCKER_BUILDKIT: 1

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Run security audit
        run: npm audit --audit-level moderate

  # 构建和推送应用容器镜像 (前后端)
  build-app-images:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [backend, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/buildingos-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 构建和推送基础设施镜像 (仅在基础设施变更时)
  build-infrastructure-images:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[infra]') || startsWith(github.ref, 'refs/tags/infra-'))
    strategy:
      matrix:
        service: [postgres, redis, tdengine, emqx, zlmediakit, grafana]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      - name: Pull and tag infrastructure images
        run: |
          case "${{ matrix.service }}" in
            postgres)
              docker pull postgres:15-alpine
              docker tag postgres:15-alpine ${{ env.DOCKER_REGISTRY }}/postgres:15-alpine
              docker push ${{ env.DOCKER_REGISTRY }}/postgres:15-alpine
              ;;
            redis)
              docker pull redis:7-alpine
              docker tag redis:7-alpine ${{ env.DOCKER_REGISTRY }}/redis:7-alpine
              docker push ${{ env.DOCKER_REGISTRY }}/redis:7-alpine
              ;;
            tdengine)
              docker pull tdengine/tdengine:3.3.0.0
              docker tag tdengine/tdengine:3.3.0.0 ${{ env.DOCKER_REGISTRY }}/tdengine:3.3.0.0
              docker push ${{ env.DOCKER_REGISTRY }}/tdengine:3.3.0.0
              ;;
            emqx)
              docker pull emqx/emqx:5.4.1
              docker tag emqx/emqx:5.4.1 ${{ env.DOCKER_REGISTRY }}/emqx:5.4.1
              docker push ${{ env.DOCKER_REGISTRY }}/emqx:5.4.1
              ;;
            zlmediakit)
              docker pull zlmediakit/zlmediakit:master
              docker tag zlmediakit/zlmediakit:master ${{ env.DOCKER_REGISTRY }}/zlmediakit:master
              docker push ${{ env.DOCKER_REGISTRY }}/zlmediakit:master
              ;;
            grafana)
              docker pull grafana/grafana:10.2.3
              docker tag grafana/grafana:10.2.3 ${{ env.DOCKER_REGISTRY }}/grafana:10.2.3
              docker push ${{ env.DOCKER_REGISTRY }}/grafana:10.2.3
              ;;
          esac

  # 部署到测试环境
  deploy-staging:
    needs: build-app-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /opt/buildingos
            
            # 备份当前版本
            ./backup.sh
            
            # 更新应用容器
            ./deploy.sh --app-only --env staging
            
            # 健康检查
            sleep 30
            if ! curl -f http://localhost:3000/health; then
              echo "Health check failed, rolling back..."
              docker-compose -f docker-compose.staging.yml down
              docker-compose -f docker-compose.staging.yml up -d
              exit 1
            fi

  # 部署到生产环境
  deploy-production:
    needs: build-app-images
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            cd /opt/buildingos
            
            # 备份生产数据
            ./backup.sh
            
            # 更新应用容器
            ./deploy.sh --app-only --env production
            
            # 健康检查
            sleep 60
            if ! curl -f http://localhost:3000/health; then
              echo "Health check failed, rolling back..."
              ./deploy.sh --rollback
              exit 1
            fi
            
            # 清理旧镜像
            docker image prune -f --filter "until=72h"

  # 通知部署结果
  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment result
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
          fi